{"version":3,"sources":["images/logo.png","components/LaunchItem/index.js","components/Loader/index.js","components/Launches/index.js","components/Launch/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","lastLaunchItemRef","launch","flight_number","mission_name","launch_success","launch_date_local","launch_year","details","className","ref","to","slice","Loader","LAUNCHES_QUERY","gql","Launches","useQuery","variables","offset","limit","notifyOnNetworkStatusChange","fetchPolicy","loading","error","data","fetchMore","networkStatus","useEffect","console","log","observer","useRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","launches","length","updateQuery","prev","fetchMoreResult","Object","assign","observe","onScroll","map","index","key","LAUNCH_QUERY","Launch","useParams","parseInt","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","src","logo","alt","style","width","display","margin","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f76e9989.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8a8d8a01.png\";","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./index.scss\";\r\nimport \"../../global/index.scss\";\r\n\r\nconst LaunchItem = ({\r\n  lastLaunchItemRef,\r\n  launch: {\r\n    flight_number,\r\n    mission_name,\r\n    launch_success,\r\n    launch_year,\r\n    launch_date_local,\r\n    details,\r\n  },\r\n}) => {\r\n  return (\r\n    <li\r\n      className=\"launch-item\"\r\n      {...(lastLaunchItemRef ? { ref: lastLaunchItemRef } : {})}\r\n    >\r\n      <div className=\"row-between\">\r\n        <h4>\r\n          Mission:{\" \"}\r\n          <span\r\n            className={`mission-name ${\r\n              launch_success === null\r\n                ? \"mission-name--future\"\r\n                : launch_success\r\n                ? \"mission-name--success\"\r\n                : \"mission-name--failure\"\r\n            }`}\r\n          >\r\n            {\" \"}\r\n            {mission_name}\r\n          </span>\r\n        </h4>\r\n        <Link className=\"btn mg-left-50\" to={`/launch/${flight_number}`}>\r\n          Launch Details\r\n        </Link>\r\n      </div>\r\n\r\n      <div className=\"row-between\">\r\n        <span className=\"date\">Date: {launch_date_local.slice(0, 10)}</span>\r\n      </div>\r\n\r\n      <div className=\"row-between\">\r\n        <span className=\"date\">Time: {launch_date_local.slice(11, 19)}</span>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default LaunchItem;\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport \"../../global/index.scss\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"container-full flex-center\">\r\n      <div className=\"lds-ring\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useEffect, useCallback, useRef } from \"react\";\r\nimport { useQuery, gql, NetworkStatus } from \"@apollo/client\";\r\nimport LaunchItem from \"../LaunchItem\";\r\nimport \"./index.scss\";\r\nimport \"../../global/index.scss\";\r\nimport Loader from \"../Loader\";\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query LaunchesQuery($limit: Int, $offset: Int) {\r\n    launches(limit: $limit, offset: $offset) {\r\n      flight_number\r\n      mission_name\r\n      launch_success\r\n      launch_year\r\n      launch_date_local\r\n      details\r\n    }\r\n  }\r\n`;\r\n\r\nconst Launches = () => {\r\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\r\n    LAUNCHES_QUERY,\r\n    {\r\n      variables: {\r\n        offset: 0,\r\n        limit: 10,\r\n      },\r\n      notifyOnNetworkStatusChange: false,\r\n      fetchPolicy: \"cache-first\",\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    console.log(\"REMOUNTED\");\r\n  });\r\n\r\n  function loadMore() {\r\n    //console.log(\"DATA LENGTH: \", data.launches.length);\r\n    fetchMore({\r\n      variables: {\r\n        offset: data.launches.length,\r\n      },\r\n      updateQuery: (prev, { fetchMoreResult }) => {\r\n        // console.log(\"fetchMoreResult: \", fetchMoreResult);\r\n        // console.log(\"prev: \", prev);\r\n        if (!fetchMoreResult) return prev;\r\n        return Object.assign({}, prev, {\r\n          launches: [...prev.launches, ...fetchMoreResult.launches],\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  const observer = useRef();\r\n\r\n  const lastLaunchItemRef = useCallback(\r\n    (node) => {\r\n      if (observer.current) observer.current.disconnect();\r\n      observer.current = new IntersectionObserver((entries) => {\r\n        if (entries[0].isIntersecting) {\r\n          loadMore();\r\n        }\r\n      });\r\n      if (node) observer.current.observe(node);\r\n    },\r\n    [data]\r\n  );\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return \"Error :(\";\r\n\r\n  return (\r\n    <ul\r\n      className=\"container-md container-flex-row-wrap mg-auto\"\r\n      onScroll={() => console.log(\"SCROLLING..........\")}\r\n    >\r\n      {/* <button onClick={loadMore}>Load more</button> */}\r\n      {data.launches.map((launch, index) => {\r\n        if (index + 1 === data.launches.length)\r\n          return (\r\n            <LaunchItem\r\n              lastLaunchItemRef={lastLaunchItemRef}\r\n              key={launch.flight_number}\r\n              launch={launch}\r\n            />\r\n          );\r\n        return <LaunchItem key={launch.flight_number} launch={launch} />;\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Launches;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./index.scss\";\r\nimport \"../../global/index.scss\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loader from \"../Loader\";\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_success\r\n      launch_date_local\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Launch = () => {\r\n  useEffect(() => {});\r\n\r\n  let { flight_number } = useParams();\r\n  flight_number = parseInt(flight_number);\r\n\r\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\r\n    variables: {\r\n      flight_number,\r\n    },\r\n  });\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return \"Error :(\";\r\n\r\n  const {\r\n    launch: {\r\n      mission_name,\r\n      launch_year,\r\n      launch_success,\r\n      launch_date_local,\r\n      rocket: { rocket_id, rocket_name, rocket_type },\r\n    },\r\n  } = data;\r\n\r\n  return (\r\n    <div className=\"container-md container-flex-row-wrap mg-auto\">\r\n      <h1 className=\"h-2rem width-100\">\r\n        Mission: <span>{mission_name}</span>\r\n      </h1>\r\n\r\n      <h3 className=\"h-125rem width-100 mg-top-20\">Launch Details</h3>\r\n\r\n      <div className=\"container-md container-flex-row-wrap bg-gray pd-all-15 mg-top-20\">\r\n        <span className=\"block width-100 mg-top-10 font-lightgray\">\r\n          Mission name: <span className=\"font-white\">{mission_name}</span>\r\n        </span>\r\n        <span className=\"block width-100 mg-top-10 font-lightgray\">\r\n          Flight number: <span className=\"font-white\">{flight_number}</span>\r\n        </span>\r\n        <span className=\"block width-100 mg-top-10 font-lightgray\">\r\n          Launch year: <span className=\"font-white\">{launch_year}</span>\r\n        </span>\r\n        <span className=\"block width-100 mg-top-10 font-lightgray\">\r\n          Launch success:{\" \"}\r\n          <span className=\"font-white\">\r\n            {launch_success ? \"Success\" : \"Failure\"}\r\n          </span>\r\n        </span>\r\n      </div>\r\n\r\n      <h3 className=\"h-125rem width-100 mg-top-20\">Rocket Details</h3>\r\n\r\n      <div className=\"container-md container-flex-row-wrap bg-gray pd-all-15 mg-top-20\">\r\n        <span className=\"block width-100 mg-top-10 font-lightgray\">\r\n          Rocket ID: <span className=\"font-white\">{rocket_id}</span>\r\n        </span>\r\n        <span className=\"block width-100 mg-top-10 font-lightgray\">\r\n          Rocket name: <span className=\"font-white\">{rocket_name}</span>\r\n        </span>\r\n        <span className=\"block width-100 mg-top-10 font-lightgray\">\r\n          Rocket type: <span className=\"font-white\">{rocket_type}</span>\r\n        </span>\r\n      </div>\r\n\r\n      <Link className=\"btn mg-top-20\" to=\"/\">\r\n        Go back\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Launch;\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Launches from \"../Launches\";\r\nimport Launch from \"../Launch\";\r\nimport logo from \"../../images/logo.png\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"/graphql\",\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div\r\n          className=\"container-full pd-all-20\"\r\n          onScroll={() => console.log(\"SCROLLING..........\")}\r\n        >\r\n          <img\r\n            src={logo}\r\n            alt=\"SpaceX\"\r\n            style={{ width: 300, display: \"block\", margin: \"auto\" }}\r\n          />\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Launches />\r\n            </Route>\r\n\r\n            <Route exact path=\"/launch/:flight_number\">\r\n              <Launch />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}